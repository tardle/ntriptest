// generated from rosidl_adapter/resource/msg.idl.em
// with input from mavros_msgs/msg/GimbalManagerInformation.msg
// generated code does not contain a copyright notice

#include "std_msgs/msg/Header.idl"

module mavros_msgs {
  module msg {
    module GimbalManagerInformation_Constants {
      @verbatim (language="comment", text=
        "GIMBAL_MANAGER_CAP_FLAGS" "\n"        " Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT.")
      const uint32 CAP_FLAGS_HAS_RETRACT = 1;
      @verbatim (language="comment", text=
        "Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL.")
      const uint32 CAP_FLAGS_HAS_NEUTRAL = 2;
      @verbatim (language="comment", text=
        "Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS.")
      const uint32 CAP_FLAGS_HAS_ROLL_AXIS = 4;
      @verbatim (language="comment", text=
        "Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW.")
      const uint32 CAP_FLAGS_HAS_ROLL_FOLLOW = 8;
      @verbatim (language="comment", text=
        "Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK.")
      const uint32 CAP_FLAGS_HAS_ROLL_LOCK = 16;
      @verbatim (language="comment", text=
        "Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS.")
      const uint32 CAP_FLAGS_HAS_PITCH_AXIS = 32;
      @verbatim (language="comment", text=
        "Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW.")
      const uint32 CAP_FLAGS_HAS_PITCH_FOLLOW = 64;
      @verbatim (language="comment", text=
        "Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK.")
      const uint32 CAP_FLAGS_HAS_PITCH_LOCK = 128;
      @verbatim (language="comment", text=
        "Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS.")
      const uint32 CAP_FLAGS_HAS_YAW_AXIS = 256;
      @verbatim (language="comment", text=
        "Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW.")
      const uint32 CAP_FLAGS_HAS_YAW_FOLLOW = 512;
      @verbatim (language="comment", text=
        "Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK.")
      const uint32 CAP_FLAGS_HAS_YAW_LOCK = 1024;
      @verbatim (language="comment", text=
        "Based on GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW.")
      const uint32 CAP_FLAGS_SUPPORTS_INFINITE_YAW = 2048;
      @verbatim (language="comment", text=
        "Gimbal manager supports to point to a local position.")
      const uint32 CAP_FLAGS_CAN_POINT_LOCATION_LOCAL = 65536;
      @verbatim (language="comment", text=
        "Gimbal manager supports to point to a global latitude, longitude, altitude position.")
      const uint32 CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL = 131072;
    };
    @verbatim (language="comment", text=
      "MAVLink message: GIMBAL_MANAGER_INFORMATION" "\n"
      "https://mavlink.io/en/messages/common.html#GIMBAL_MANAGER_INFORMATION")
    struct GimbalManagerInformation {
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        "Bitmap of gimbal capability flags - see GIMBAL_MANAGER_CAP_FLAGS")
      uint32 cap_flags;

      @verbatim (language="comment", text=
        "Gimbal device ID that this gimbal manager is responsible for.")
      uint8 gimbal_device_id;

      @verbatim (language="comment", text=
        "Minimum hardware roll angle (positive: rolling to the right, negative: rolling to the left)")
      float roll_min;

      @verbatim (language="comment", text=
        "Maximum hardware roll angle (positive: rolling to the right, negative: rolling to the left)")
      float roll_max;

      @verbatim (language="comment", text=
        "Minimum pitch angle (positive: up, negative: down)")
      float pitch_min;

      @verbatim (language="comment", text=
        "Maximum pitch angle (positive: up, negative: down)")
      float pitch_max;

      @verbatim (language="comment", text=
        "Minimum yaw angle (positive: to the right, negative: to the left)")
      float yaw_min;

      @verbatim (language="comment", text=
        "Maximum yaw angle (positive: to the right, negative: to the left)")
      float yaw_max;
    };
  };
};
