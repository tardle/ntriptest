// generated from rosidl_adapter/resource/msg.idl.em
// with input from mavros_msgs/msg/OpenDroneIDBasicID.msg
// generated code does not contain a copyright notice

#include "std_msgs/msg/Header.idl"

module mavros_msgs {
  module msg {
    module OpenDroneIDBasicID_Constants {
      @verbatim (language="comment", text=
        "[[[cog:" "\n"        "import mavros_cog" "\n"        "mavros_cog.idl_decl_enum('MAV_ODID_ID_TYPE', 'ID_TYPE_')" "\n"        "mavros_cog.idl_decl_enum('MAV_ODID_UA_TYPE', 'UA_TYPE_')" "\n"        "]]]" "\n"        "MAV_ODID_ID_TYPE" "\n"        "No type defined.")
      const uint8 ID_TYPE_NONE = 0;
      @verbatim (language="comment", text=
        "Manufacturer Serial Number (ANSI/CTA-2063 format).")
      const uint8 ID_TYPE_SERIAL_NUMBER = 1;
      @verbatim (language="comment", text=
        "CAA (Civil Aviation Authority) registered ID. Format: [ICAO Country Code].[CAA Assigned ID].")
      const uint8 ID_TYPE_CAA_REGISTRATION_ID = 2;
      @verbatim (language="comment", text=
        "UTM (Unmanned Traffic Management) assigned UUID (RFC4122).")
      const uint8 ID_TYPE_UTM_ASSIGNED_UUID = 3;
      @verbatim (language="comment", text=
        "A 20 byte ID for a specific flight/session. The exact ID type is indicated by the first byte of uas_id and these type values are managed by ICAO.")
      const uint8 ID_TYPE_SPECIFIC_SESSION_ID = 4;
      @verbatim (language="comment", text=
        "MAV_ODID_UA_TYPE" "\n"        "No UA (Unmanned Aircraft) type defined.")
      const uint8 UA_TYPE_NONE = 0;
      @verbatim (language="comment", text=
        "Aeroplane/Airplane. Fixed wing.")
      const uint8 UA_TYPE_AEROPLANE = 1;
      @verbatim (language="comment", text=
        "Helicopter or multirotor.")
      const uint8 UA_TYPE_HELICOPTER_OR_MULTIROTOR = 2;
      @verbatim (language="comment", text=
        "Gyroplane.")
      const uint8 UA_TYPE_GYROPLANE = 3;
      @verbatim (language="comment", text=
        "VTOL (Vertical Take-Off and Landing). Fixed wing aircraft that can take off vertically.")
      const uint8 UA_TYPE_HYBRID_LIFT = 4;
      @verbatim (language="comment", text=
        "Ornithopter.")
      const uint8 UA_TYPE_ORNITHOPTER = 5;
      @verbatim (language="comment", text=
        "Glider.")
      const uint8 UA_TYPE_GLIDER = 6;
      @verbatim (language="comment", text=
        "Kite.")
      const uint8 UA_TYPE_KITE = 7;
      @verbatim (language="comment", text=
        "Free Balloon.")
      const uint8 UA_TYPE_FREE_BALLOON = 8;
      @verbatim (language="comment", text=
        "Captive Balloon.")
      const uint8 UA_TYPE_CAPTIVE_BALLOON = 9;
      @verbatim (language="comment", text=
        "Airship. E.g. a blimp.")
      const uint8 UA_TYPE_AIRSHIP = 10;
      @verbatim (language="comment", text=
        "Free Fall/Parachute (unpowered).")
      const uint8 UA_TYPE_FREE_FALL_PARACHUTE = 11;
      @verbatim (language="comment", text=
        "Rocket.")
      const uint8 UA_TYPE_ROCKET = 12;
      @verbatim (language="comment", text=
        "Tethered powered aircraft.")
      const uint8 UA_TYPE_TETHERED_POWERED_AIRCRAFT = 13;
      @verbatim (language="comment", text=
        "Ground Obstacle.")
      const uint8 UA_TYPE_GROUND_OBSTACLE = 14;
      @verbatim (language="comment", text=
        "Other type of aircraft not listed earlier.")
      const uint8 UA_TYPE_OTHER = 15;
    };
    @verbatim (language="comment", text=
      "Remote ID message - Basic ID" "\n"
      "https://mavlink.io/en/messages/common.html#OPEN_DRONE_ID_BASIC_ID")
    struct OpenDroneIDBasicID {
      @verbatim (language="comment", text=
        "]] (checksum: 5c8d15e3412f1859012762424293d945)")
      @unit (value="[[end")
      std_msgs::msg::Header header;

      string id_or_mac;

      uint8 id_type;

      uint8 ua_type;

      string uas_id;
    };
  };
};
