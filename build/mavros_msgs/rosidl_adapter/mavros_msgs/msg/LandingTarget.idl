// generated from rosidl_adapter/resource/msg.idl.em
// with input from mavros_msgs/msg/LandingTarget.msg
// generated code does not contain a copyright notice

#include "geometry_msgs/msg/Pose.idl"
#include "std_msgs/msg/Header.idl"

module mavros_msgs {
  module msg {
    typedef float float__2[2];
    module LandingTarget_Constants {
      @verbatim (language="comment", text=
        "MAV_FRAME enum" "\n"        "Global coordinate frame, WGS84 coordinate system. First value / x: latitude, second value / y: longitude, third value / z: positive altitude over mean sea level (MSL)")
      const uint8 GLOBAL = 0;
      @verbatim (language="comment", text=
        "Local coordinate frame, Z-up (x: north, y: east, z: down).")
      const uint8 LOCAL_NED = 2;
      @verbatim (language="comment", text=
        "NOT a coordinate frame, indicates a mission command.")
      const uint8 MISSION = 3;
      @verbatim (language="comment", text=
        "Global coordinate frame, WGS84 coordinate system, relative altitude over ground with respect to the home position. First value / x: latitude, second value / y: longitude, third value / z: positive altitude with 0 being at the altitude of the home location.")
      const uint8 GLOBAL_RELATIVE_ALT = 4;
      @verbatim (language="comment", text=
        "Local coordinate frame, Z-down (x: east, y: north, z: up)")
      const uint8 LOCAL_ENU = 5;
      @verbatim (language="comment", text=
        "Global coordinate frame, WGS84 coordinate system. First value / x: latitude in degrees*1.0e-7, second value / y: longitude in degrees*1.0e-7, third value / z: positive altitude over mean sea level (MSL)")
      const uint8 GLOBAL_INT = 6;
      @verbatim (language="comment", text=
        "Global coordinate frame, WGS84 coordinate system, relative altitude over ground with respect to the home position. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude with 0 being at the altitude of the home location.")
      const uint8 GLOBAL_RELATIVE_ALT_INT = 7;
      @verbatim (language="comment", text=
        "Offset to the current local frame. Anything expressed in this frame should be added to the current local frame position.")
      const uint8 LOCAL_OFFSET_NED = 8;
      @verbatim (language="comment", text=
        "Setpoint in body NED frame. This makes sense if all position control is externalized - e.g. useful to command 2 m/s^2 acceleration to the right.")
      const uint8 BODY_NED = 9;
      @verbatim (language="comment", text=
        "Offset in body NED frame. This makes sense if adding setpoints to the current flight path, to avoid an obstacle - e.g. useful to command 2 m/s^2 acceleration to the east.")
      const uint8 BODY_OFFSET_NED = 10;
      @verbatim (language="comment", text=
        "Global coordinate frame with above terrain level altitude. WGS84 coordinate system, relative altitude over terrain with respect to the waypoint coordinate. First value / x: latitude in degrees, second value / y: longitude in degrees, third value / z: positive altitude in meters with 0 being at ground level in terrain model.")
      const uint8 GLOBAL_TERRAIN_ALT = 11;
      @verbatim (language="comment", text=
        "Global coordinate frame with above terrain level altitude. WGS84 coordinate system, relative altitude over terrain with respect to the waypoint coordinate. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude in meters with 0 being at ground level in terrain model.")
      const uint8 GLOBAL_TERRAIN_ALT_INT = 12;
      @verbatim (language="comment", text=
        "LANDING_TARGET_TYPE enum" "\n"        "Landing target signaled by light beacon (ex: IR-LOCK)")
      const uint8 LIGHT_BEACON = 0;
      @verbatim (language="comment", text=
        "Landing target signaled by radio beacon (ex: ILS, NDB)")
      const uint8 RADIO_BEACON = 1;
      @verbatim (language="comment", text=
        "Landing target represented by a fiducial marker (ex: ARTag)")
      const uint8 VISION_FIDUCIAL = 2;
      @verbatim (language="comment", text=
        "Landing target represented by a pre-defined visual shape/feature (ex: X-marker, H-marker, square)")
      const uint8 VISION_OTHER = 3;
    };
    @verbatim (language="comment", text=
      "MAVLink message: LANDING_TARGET" "\n"
      "https://mavlink.io/en/messages/common.html")
    struct LandingTarget {
      std_msgs::msg::Header header;

      uint8 target_num;

      uint8 frame;

      float__2 angle;

      float distance;

      float__2 size;

      geometry_msgs::msg::Pose pose;

      uint8 type;
    };
  };
};
