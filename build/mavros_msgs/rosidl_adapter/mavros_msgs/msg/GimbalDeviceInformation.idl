// generated from rosidl_adapter/resource/msg.idl.em
// with input from mavros_msgs/msg/GimbalDeviceInformation.msg
// generated code does not contain a copyright notice

#include "std_msgs/msg/Header.idl"

module mavros_msgs {
  module msg {
    module GimbalDeviceInformation_Constants {
      @verbatim (language="comment", text=
        "GIMBAL_DEVICE_CAP_FLAGS" "\n"        " Gimbal device supports a retracted position")
      const uint32 CAP_FLAGS_HAS_RETRACT = 1;
      @verbatim (language="comment", text=
        "Gimbal device supports a horizontal, forward looking position, stabilized")
      const uint32 CAP_FLAGS_HAS_NEUTRAL = 2;
      @verbatim (language="comment", text=
        "Gimbal device supports rotating around roll axis.")
      const uint32 CAP_FLAGS_HAS_ROLL_AXIS = 4;
      @verbatim (language="comment", text=
        "Gimbal device supports to follow a roll angle relative to the vehicle")
      const uint32 CAP_FLAGS_HAS_ROLL_FOLLOW = 8;
      @verbatim (language="comment", text=
        "Gimbal device supports locking to an roll angle (generally that's the default with roll stabilized)")
      const uint32 CAP_FLAGS_HAS_ROLL_LOCK = 16;
      @verbatim (language="comment", text=
        "Gimbal device supports rotating around pitch axis.")
      const uint32 CAP_FLAGS_HAS_PITCH_AXIS = 32;
      @verbatim (language="comment", text=
        "Gimbal device supports to follow a pitch angle relative to the vehicle")
      const uint32 CAP_FLAGS_HAS_PITCH_FOLLOW = 64;
      @verbatim (language="comment", text=
        "Gimbal device supports locking to an pitch angle (generally that's the default with pitch stabilized)")
      const uint32 CAP_FLAGS_HAS_PITCH_LOCK = 128;
      @verbatim (language="comment", text=
        "Gimbal device supports rotating around yaw axis.")
      const uint32 CAP_FLAGS_HAS_YAW_AXIS = 256;
      @verbatim (language="comment", text=
        "Gimbal device supports to follow a yaw angle relative to the vehicle (generally that's the default)")
      const uint32 CAP_FLAGS_HAS_YAW_FOLLOW = 512;
      @verbatim (language="comment", text=
        "Gimbal device supports locking to an absolute heading (often this is an option available)")
      const uint32 CAP_FLAGS_HAS_YAW_LOCK = 1024;
      @verbatim (language="comment", text=
        "Gimbal device supports yawing/panning infinetely (e.g. using slip disk).")
      const uint32 CAP_FLAGS_SUPPORTS_INFINITE_YAW = 2048;
    };
    @verbatim (language="comment", text=
      "MAVLink message: GIMBAL_DEVICE_INFORMATION" "\n"
      "https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_INFORMATION")
    struct GimbalDeviceInformation {
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        "Name of the gimbal vendor.")
      string vendor_name;

      @verbatim (language="comment", text=
        "Name of the gimbal model.")
      string model_name;

      @verbatim (language="comment", text=
        "Custom name of the gimbal given to it by the user.")
      string custom_name;

      @verbatim (language="comment", text=
        "Version of the gimbal firmware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff).")
      uint32 firmware_version;

      @verbatim (language="comment", text=
        "Version of the gimbal hardware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff).")
      uint32 hardware_version;

      @verbatim (language="comment", text=
        "UID of gimbal hardware (0 if unknown).")
      uint64 uid;

      @verbatim (language="comment", text=
        "Bitmap of gimbal capability flags - see GIMBAL_DEVICE_CAP_FLAGS")
      uint32 cap_flags;

      @verbatim (language="comment", text=
        "Bitmap for use for gimbal-specific capability flags.")
      uint16 custom_cap_flags;

      @verbatim (language="comment", text=
        "Minimum hardware roll angle (positive: rolling to the right, negative: rolling to the left)")
      float roll_min;

      @verbatim (language="comment", text=
        "Maximum hardware roll angle (positive: rolling to the right, negative: rolling to the left)")
      float roll_max;

      @verbatim (language="comment", text=
        "Minimum pitch angle (positive: up, negative: down)")
      float pitch_min;

      @verbatim (language="comment", text=
        "Maximum pitch angle (positive: up, negative: down)")
      float pitch_max;

      @verbatim (language="comment", text=
        "Minimum yaw angle (positive: to the right, negative: to the left)")
      float yaw_min;

      @verbatim (language="comment", text=
        "Maximum yaw angle (positive: to the right, negative: to the left)")
      float yaw_max;
    };
  };
};
