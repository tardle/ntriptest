// generated from rosidl_adapter/resource/msg.idl.em
// with input from mavros_msgs/msg/GimbalDeviceAttitudeStatus.msg
// generated code does not contain a copyright notice

#include "geometry_msgs/msg/Quaternion.idl"
#include "std_msgs/msg/Header.idl"

module mavros_msgs {
  module msg {
    module GimbalDeviceAttitudeStatus_Constants {
      @verbatim (language="comment", text=
        "GIMBAL_DEVICE_FLAGS" "\n"        " Set to retracted safe position (no stabilization), takes presedence over all other flags.")
      const uint16 FLAGS_RETRACT = 1;
      @verbatim (language="comment", text=
        "Set to neutral/default position, taking precedence over all other flags except RETRACT. Neutral is commonly forward-facing and horizontal (pitch=yaw=0) but may be any orientation.")
      const uint16 FLAGS_NEUTRAL = 2;
      @verbatim (language="comment", text=
        "Lock roll angle to absolute angle relative to horizon (not relative to drone). This is generally the default with a stabilizing gimbal.")
      const uint16 FLAGS_ROLL_LOCK = 4;
      @verbatim (language="comment", text=
        "Lock pitch angle to absolute angle relative to horizon (not relative to drone). This is generally the default.")
      const uint16 FLAGS_PITCH_LOCK = 8;
      @verbatim (language="comment", text=
        "Lock yaw angle to absolute angle relative to North (not relative to drone). If this flag is set, the quaternion is in the Earth frame with the x-axis pointing North (yaw absolute). If this flag is not set, the quaternion frame is in the Earth frame rotated so that the x-axis is pointing forward (yaw relative to vehicle).")
      const uint16 FLAGS_YAW_LOCK = 16;
      @verbatim (language="comment", text=
        "GIMBAL_DEVICE_ERROR_FLAGS" "\n"        " Gimbal device is limited by hardware roll limit.")
      const uint32 ERROR_FLAGS_AT_ROLL_LIMIT = 1;
      @verbatim (language="comment", text=
        "Gimbal device is limited by hardware pitch limit.")
      const uint32 ERROR_FLAGS_AT_PITCH_LIMIT = 2;
      @verbatim (language="comment", text=
        "Gimbal device is limited by hardware yaw limit.")
      const uint32 ERROR_FLAGS_AT_YAW_LIMIT = 4;
      @verbatim (language="comment", text=
        "There is an error with the gimbal encoders.")
      const uint32 ERROR_FLAGS_ENCODER_ERROR = 8;
      @verbatim (language="comment", text=
        "There is an error with the gimbal power source.")
      const uint32 ERROR_FLAGS_POWER_ERROR = 16;
      @verbatim (language="comment", text=
        "There is an error with the gimbal motor's.")
      const uint32 ERROR_FLAGS_MOTOR_ERROR = 32;
      @verbatim (language="comment", text=
        "There is an error with the gimbal's software.")
      const uint32 ERROR_FLAGS_SOFTWARE_ERROR = 64;
      @verbatim (language="comment", text=
        "There is an error with the gimbal's communication.")
      const uint32 ERROR_FLAGS_COMMS_ERROR = 128;
      @verbatim (language="comment", text=
        "Gimbal is currently calibrating.")
      const uint32 ERROR_FLAGS_CALIBRATION_RUNNING = 256;
    };
    @verbatim (language="comment", text=
      "MAVLink message: GIMBAL_DEVICE_ATTITUDE_STATUS" "\n"
      "https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_ATTITUDE_STATUS")
    struct GimbalDeviceAttitudeStatus {
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        "System ID")
      uint8 target_system;

      @verbatim (language="comment", text=
        "Component ID")
      uint8 target_component;

      @verbatim (language="comment", text=
        "Current gimbal flags set (bitwise) - See GIMBAL_DEVICE_FLAGS")
      uint16 flags;

      @verbatim (language="comment", text=
        "Quaternion, x, y, z, w (0 0 0 1 is the null-rotation, the frame is depends on whether the flag GIMBAL_DEVICE_FLAGS_YAW_LOCK is set)")
      geometry_msgs::msg::Quaternion q;

      @verbatim (language="comment", text=
        "X component of angular velocity (NaN if unknown)")
      float angular_velocity_x;

      @verbatim (language="comment", text=
        "Y component of angular velocity (NaN if unknown)")
      float angular_velocity_y;

      @verbatim (language="comment", text=
        "Z component of angular velocity (NaN if unknown)")
      float angular_velocity_z;

      @verbatim (language="comment", text=
        "Failure flags (0 for no failure) (bitwise) - See GIMBAL_DEVICE_ERROR_FLAGS")
      uint32 failure_flags;
    };
  };
};
